/*! @page start Getting Started

@tableofcontents

@note
The features of this online help and tips for using it are described in Section @subpage help.


------------------------------------------------------------------------------
@section install Downloading QTools&trade;
The <b>QTools&trade;</b> collection is available for download from <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files/QTools/">SourceForge</a> as well as from <a class="extern" target="_blank" href="https://github.com/QuantumLeaps/qtools/releases">GitHub</a>. The QTools&trade; download is provided as a Windows EXE (for Windows) or as a ZIP file for POSIX (Linux).

Uninstalling QTools is easy. On Windows, the uninstaller is provided. On POSIX (Linx), you just need to delete the `qtools` directory from your disk.


------------------------------------------------------------------------------
@section install_win32 Installing QTools&trade; on Windows
On Windows, you install QTools with the provided installer `qtools-win32_<x.y.z>.zip`, which is **digitally signed by Quantum Leaps**. It is recommended to install QTools into the <strong>C:\\qp</strong> directory, or at least a directory that has <strong>no spaces or special characters</strong> in the name (e.g., "Program Files" or "Program Files (x86)" are poor choices).

![QTools installer on Windows](qtools_install.jpg)

@n
@attention
The Windows installer adds the `<qtools>\bin` directory to the system `PATH` and also defines the `QTOOLS` environment variable. Therefore no additional steps are required after running the setup. These steps are cleanly reversed by the QTools uninstaller.


------------------------------------------------------------------------------
@section install_posix Installing QTools&trade; on POSIX (Linux)
On POSIX (Linux), you simply unzip the `qtools-posix_<x.y.z>.zip` file to the installation folder of your choice (`~/qp/qtools` is the recommended default). After the installation, you still need to:

- add the `<qtools>/bin` directory to the global `PATH` on your system, where `<qtools>` denotes the directory where you have installed QTools (e.g., `~/qp/qtools`).

@note
Adding `<qtools>/bin` to your `PATH` will enable you to invoke all QTools utilities (like @ref qspy "QSpy" or @ref qclean "QClean") by simply typing `qspy` or `qclean` at the command prompt, regardless of your current directory. This will come handy, because typically you will not invoke `qspy` or  `qclean` from the `<qtools>/bin` directory.

- define the `QTOOLS` environment variable, for example:

@verbatim
export QTOOLS=~/qp/qtools
@endverbatim

@note
Defining the `QTOOLS` environment variable is required to run @ref qutest "QUTest Unit Testing" and @ref qspyview "QSpyView Visualization and Monitoring" utilities.


------------------------------------------------------------------------------
@section qtools_py Enabling Python Support in QUTest&trade; Unit Testing
If you wish to write your @ref qutest_script "QUTest test scripts" in Python, you need to install Python on your machine and ensure that `python` is added to your `PATH`.

@note
QUTest&trade; supports both <b>Python 2</b> (2.7+) and <b>Python 3</b> (3.4+).


------------------------------------------------------------------------------
@section qtools_tcl Enabling UDP Sockets in Tcl for QUTest&trade; Unit Testing
If you wish to write your @ref qutest_script "QUTest test scripts" in Tcl, you need make sure that your Tcl interpreter is configured to support UDP sockets to communicate with the QSPY host application.

- **Windows hosts:** The QTools&trade; collection for Windows contains the Tcl interpreter (`tclsh` version 8.4), which has been already extended with the @ref qspy_udp "UDP-Sockets" for Tcl, so on Windows you can use the `tclsh` and `wish` interpreters "as is" without any additional modifications.

- **Linux hosts:** On Linux, Tcl/Tk is usually installed, but you need to augment the standard Tcl/Tk distribution with the UDP Sockets for Tcl. Instructions of adding UDP Sockets to Tcl are included in the QTools collection for Linux, in the <span class="img folder">tcludp</span> folder (see @ref qspy_files "QSPY directories and files")

@note
The support for Tcl scripting in QUTest will be phased out in the future and developing new tests in Tcl is **not recommended**.


------------------------------------------------------------------------------
@section files Directories and Files
The following annotated directory tree in the standard <strong>QTools&trade;</strong> distribution lists the top-level directories and files:

<ul class="tag">
  <li><span class="img folder">`qtools`</span></li>
  <ul class="tag">
    <li><span class="img folder">`bin`</span> &mdash; binaries (executables and libraries)</li>
    <ul class="tag">
      <li><span class="img file">`qspy.exe`</span> &mdash; @ref qspy "QSPY executable"</li>
      <li><span class="img file">`qclean.exe`</span> &mdash; @ref qclean</li>
      <li><span class="img file">`qfsgen.exe`</span> &mdash; @ref qfsgen</li>
      <li><span class="img file_tcl">`qcalc.tcl`</span> &mdash; @ref qcalc</li>
      <li><span class="img file_tcl">`tclsh.exe`</span> &mdash; Tcl interpreter</li>
      <li><span class="img file_wish">`wish.exe`</span> &mdash; Tk interpreter</li>
      <li><span class="img file">`make.exe`</span> &mdash; make utility</li>
      <li><span class="img file">`gcc.exe`</span> &mdash; MinGW C compiler</li>
      <li><span class="img file">`g++.exe`</span> &mdash; MinGW C++ compiler</li>
      <li><span class="img file">`rm.exe`</span> &mdash; rm (remove) utility</li>
      <li>~ ~ ~</li>
    </ul>
    <li><span class="img folder">`gnu_arm-eabi`</span> &mdash; GNU ARM-EABI toolset (GCC 7.2.0)</li>
    <li><span class="img folder">qspy</span> &mdash; @ref qspy "QSPY tool" for software tracing and testing</li>
    <ul class="tag">
      <li><span class="img folder">`include`</span> &mdash; QSPY includes</li>
      <li><span class="img folder">`source`</span> &mdash; QSPY sources</li>
      <li><span class="img folder">`posix`</span> &mdash; QSPY port to POSIX (Linux, macOS)</li>
      <li><span class="img folder">`qspypy`</span> &mdash; Python scripts (@ref qutest "QUTest")</li>
      <ul class="tag">
        <li><span class="img file_py">`config.py`</span> &mdash; Configuration parameters for "qutest"; can be modified here or via another test start script</li>
        <li><span class="img file_py">`fixtures.py`</span> &mdash; Test fixtures for PyTest; These fixtures MUST be loaded in your conftest.py file to be used </li>
        <li><span class="img file_py">`qspy.py`</span> &mdash; Interface to the QSPY "back end" </li>
        <li><span class="img file_py">`qutest.py`</span> &mdash; The QUtest test context and a number of helper methods for PyTest</li>
      </ul>
      <li><span class="img folder">`win32`</span> &mdash; QSPY port to Windows</li>
      <li><span class="img folder">`tcludp`</span> &mdash; UDP extension to standard Tcl (needed for POSIX)</li>
      <li><span class="img folder">`tcl`</span> &mdash; Tcl/Tk scripts (@ref qutest "QUTest" and @ref qspyview "QSpyView")</li>
      <ul class="tag">
        <li><span class="img folder">`img`</span> &mdash; images used by `qspyview.tcl`</li>
        <li><span class="img file_tcl">`qspy.tcl`</span> &mdash; Tcl script for UDP communication with the QSPY Back-End (usable for both GUI-based and head-less scripts)</li>
        <li><span class="img file_tcl">`qutest.tcl`</span> &mdash; Main @ref qutest "QUTest&trade; Tcl script"</li>
        <li><span class="img file_wish">`qspyview.tcl`</span> &mdash; Main @ref qspyview "QSpyView&trade; Tcl/Tk script"</li>
        <li><span class="img file_wish">`default.tcl`</span> &mdash; the default customization of the  @ref qspyview "QSpyView&trade; Tcl/Tk script"</li>
      </ul>
      <li><span class="img folder">`matlab`</span> &mdash; @ref qspy_matlab "QSPY MATLAB Support"</li>
      <ul class="tag">
        <li><span class="img file">`qspy.m`</span> &mdash; MATLAB script to analyze QSPY output</li>
        <li><span class="img file">`dpp.m`</span> &mdash; MATLAB script to analyze DPP example</li>
      </ul>
      <li><span class="img folder">`mscgen`</span> &mdash; @ref qspy_mscgen "QSPY MscGen Support"</li>
      <ul class="tag">
        <li><span class="img file">`dpp.msc`</span> &mdash; MscGen output from DPP example</li>
        <li><span class="img file">`dpp.svg`</span> &mdash; Message Sequence Chart generated by MscGen</li>
      </ul>
        <li><span class="img file_py">`setup.py`</span> &mdash; Python setup file for "qspypy"</li>
    </ul>
    <li><span class="img folder">`qwin`</span> &mdash; @ref qwin</li>
  </ul>
</ul>

@next{qpspy}
*/
